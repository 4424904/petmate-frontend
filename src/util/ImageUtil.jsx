import React, { useState } from 'react';
// import axios from 'axios';
import { apiRequest } from '../services/api';
import './ImageUtil.css';

const FILE_API_BASE_URL = `${process.env.REACT_APP_SPRING_API_BASE || 'http://localhost:8090'}/api/files`;

// S3 Ïù¥ÎØ∏ÏßÄ URL ÏÉùÏÑ± Ìó¨Ìçº Ìï®Ïàò
const getImageUrl = (imageData) => {
    if (!imageData) return null;

    // Î¨∏ÏûêÏó¥Ïù∏ Í≤ΩÏö∞ (Í∏∞Ï°¥ Ìò∏ÌôòÏÑ±)
    if (typeof imageData === 'string') {
        // Ïù¥ÎØ∏ ÏôÑÏ†ÑÌïú URLÏù∏ Í≤ΩÏö∞ Í∑∏ÎåÄÎ°ú Î∞òÌôò
        if (imageData.startsWith('http')) return imageData;
        // S3 ÌÇ§Ïù∏ Í≤ΩÏö∞Îäî ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏúºÎØÄÎ°ú null Î∞òÌôò (Î∞±ÏóîÎìúÏóêÏÑú imageUrl Ï†úÍ≥µÌï¥Ïïº Ìï®)
        return null;
    }

    // Í∞ùÏ≤¥Ïù∏ Í≤ΩÏö∞ imageUrl Ïö∞ÏÑ† ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ filePath ÌôïÏù∏
    if (typeof imageData === 'object') {
        console.log('üîç [getImageUrl] imageData:', imageData); // ÎîîÎ≤ÑÍπÖÏö©

        if (imageData.imageUrl && imageData.imageUrl.startsWith('http')) {
            console.log('‚úÖ [getImageUrl] Using imageUrl:', imageData.imageUrl);
            return imageData.imageUrl;
        }
        if (imageData.filePath && imageData.filePath.startsWith('http')) {
            console.log('‚úÖ [getImageUrl] Using filePath:', imageData.filePath);
            return imageData.filePath;
        }
        // S3 ÌÇ§Îäî ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏùå
        console.log('‚ùå [getImageUrl] No valid URL found, imageData:', imageData);
        return null;
    }

    return null;
};


// ====== Ïù¥ÎØ∏ÏßÄ Ï°∞Ìöå Í∏∞Îä• ======

// Îã®Ïùº Ïù¥ÎØ∏ÏßÄ Ï°∞Ìöå
export const fetchSingleImage = async (filePath) => {
    try {
        const response = await apiRequest.get(`${FILE_API_BASE_URL}/view`, {
            params: { filePath }
        });
        return response.data;
    } catch (err) {
        throw new Error(err.response?.data?.message || err.message || 'Ï°∞Ìöå Ïã§Ìå®');
    }
};

// Ï∞∏Ï°∞ Í∏∞Ï§Ä Îã§Ï§ë Ïù¥ÎØ∏ÏßÄ Ï°∞Ìöå
export const fetchImagesByReference = async (imageTypeCode, referenceId) => {
    try {
        const response = await apiRequest.get(`${FILE_API_BASE_URL}/list`, {
            params: { imageTypeCode, referenceId }
        });
        return response.data;
    } catch (err) {
        throw new Error(err.response?.data?.message || err.message || 'Ï°∞Ìöå Ïã§Ìå®');
    }
};

// ====== Ïù¥ÎØ∏ÏßÄ Î∑∞Ïñ¥ Ïª¥Ìè¨ÎÑåÌä∏ ======

// Í∞ÄÎ°ú Ïä¨ÎùºÏù¥Îìú Ïù¥ÎØ∏ÏßÄ Î∑∞Ïñ¥
export const ImageSlider = ({
    images = [],
    className = '',
    showDots = true,
    showArrows = true,
    autoSlide = false,
    slideInterval = 3000,
    onImageClick = () => {},
    loading = false,
    errorMessage = '',
    emptyMessage = 'Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§.'
}) => {
    const [currentIndex, setCurrentIndex] = React.useState(0);
    const [isAutoPlaying, setIsAutoPlaying] = React.useState(autoSlide);
    const intervalRef = React.useRef(null);

    React.useEffect(() => {
        if (isAutoPlaying && images.length > 1) {
            intervalRef.current = setInterval(() => {
                setCurrentIndex((prev) => (prev + 1) % images.length);
            }, slideInterval);
        } else {
            clearInterval(intervalRef.current);
        }

        return () => clearInterval(intervalRef.current);
    }, [isAutoPlaying, images.length, slideInterval]);

    const goToSlide = (index) => {
        setCurrentIndex(index);
    };

    const goToPrevious = () => {
        setCurrentIndex((prev) => (prev - 1 + images.length) % images.length);
    };

    const goToNext = () => {
        setCurrentIndex((prev) => (prev + 1) % images.length);
    };

    const handleMouseEnter = () => {
        if (autoSlide) setIsAutoPlaying(false);
    };

    const handleMouseLeave = () => {
        if (autoSlide) setIsAutoPlaying(true);
    };

    if (loading) {
        return (
            <div className={`image-slider loading ${className}`}>
                <div className="slider-loading">Ïù¥ÎØ∏ÏßÄ Î°úÎî© Ï§ë...</div>
            </div>
        );
    }

    if (errorMessage) {
        return (
            <div className={`image-slider error ${className}`}>
                <div className="slider-error">{errorMessage}</div>
            </div>
        );
    }

    if (!images || images.length === 0) {
        return (
            <div className={`image-slider empty ${className}`}>
                <div className="slider-empty">{emptyMessage}</div>
            </div>
        );
    }

    return (
        <div
            className={`image-slider ${className}`}
            onMouseEnter={handleMouseEnter}
            onMouseLeave={handleMouseLeave}
        >
            <div className="slider-container">
                {showArrows && images.length > 1 && (
                    <>
                        <button
                            className="slider-arrow prev"
                            onClick={goToPrevious}
                            aria-label="Ïù¥Ï†Ñ Ïù¥ÎØ∏ÏßÄ"
                        >
                            ‚Äπ
                        </button>
                        <button
                            className="slider-arrow next"
                            onClick={goToNext}
                            aria-label="Îã§Ïùå Ïù¥ÎØ∏ÏßÄ"
                        >
                            ‚Ä∫
                        </button>
                    </>
                )}

                <div className="slider-track">
                    {images.map((image, index) => (
                        <div
                            key={index}
                            className={`slider-slide ${index === currentIndex ? 'active' : ''}`}
                            onClick={() => onImageClick(image, index)}
                        >
                            <img
                                src={getImageUrl(image) || image.url || image}
                                alt={image.alt || `Ïä¨ÎùºÏù¥Îìú ${index + 1}`}
                                className="slider-image"
                            />
                        </div>
                    ))}
                </div>
            </div>

            {showDots && images.length > 1 && (
                <div className="slider-dots">
                    {images.map((_, index) => (
                        <button
                            key={index}
                            className={`slider-dot ${index === currentIndex ? 'active' : ''}`}
                            onClick={() => goToSlide(index)}
                            aria-label={`${index + 1}Î≤àÏß∏ Ïù¥ÎØ∏ÏßÄÎ°ú Ïù¥Îèô`}
                        />
                    ))}
                </div>
            )}
        </div>
    );
};

// Ï°∞Ìöå+ÏóÖÎ°úÎìú ÌÜµÌï© Ïª¥Ìè¨ÎÑåÌä∏ (CompanyRegisterPage Ïä§ÌÉÄÏùº Ï†ÅÏö©)
export const ImageUploadViewer = React.forwardRef(({
    imageTypeCode = '01',
    referenceId = 1,
    mode = 'single', // 'single' | 'multiple'
    onUploadSuccess = () => {},
    onUploadError = () => {},
    onViewError = () => {},
    acceptTypes = 'image/*',
    maxFileSize = 10 * 1024 * 1024,
    maxFiles = 10,
    className = '',
    emptyPlaceholder = 'Ïù¥ÎØ∏ÏßÄÎ•º ÏóÖÎ°úÎìúÌïòÎ†§Î©¥ ÌÅ¥Î¶≠ÌïòÍ±∞ÎÇò ÎìúÎûòÍ∑∏ÌïòÏÑ∏Ïöî',
    disabled = false,
    files,
    setFiles,
    isEditMode = false
}, ref) => {
    const [images, setImages] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const inputRef = React.useRef(null);

    // Ïù¥ÎØ∏ÏßÄ Î™©Î°ù Ï°∞Ìöå
    const loadImages = async () => {
        setLoading(true);
        setError('');
        try {
            if (referenceId && isEditMode) {
                const response = await fetchImagesByReference(imageTypeCode, referenceId);
                if (response.success) {
                    // setFilesÎäî File Í∞ùÏ≤¥ Î∞∞Ïó¥Ïö©Ïù¥ÎØÄÎ°ú Ï¥àÍ∏∞Ìôî
                    setFiles([]);
                    setImages(response.images || []);
                } else {
                    throw new Error(response.message || 'Ï°∞Ìöå Ïã§Ìå®');
                }
            }
        } catch (err) {
            const errorMessage = err.message || 'Ïù¥ÎØ∏ÏßÄ Ï°∞Ìöå Ïã§Ìå®';
            setError(errorMessage);
            onViewError(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Ïù¥ÎØ∏ÏßÄ Î°úÎìú
    React.useEffect(() => {
        loadImages();
    }, [imageTypeCode, referenceId]);

    // ÌååÏùº Ï∂îÍ∞Ä Ìï∏Îì§Îü¨ - ÌååÏùº ÏÑ†ÌÉùÎßå (ÏóÖÎ°úÎìúÎäî Ìèº Ï†úÏ∂ú Ïãú)
    const handleFiles = (newFiles) => {
        const fileArray = Array.from(newFiles);

        // ÌååÏùº ÌÅ¨Í∏∞ Í≤ÄÏ¶ù
        const oversizedFiles = fileArray.filter(file => file.size > maxFileSize);
        if (oversizedFiles.length > 0) {
            setError(`ÏùºÎ∂Ä ÌååÏùºÏù¥ ${Math.round(maxFileSize / (1024 * 1024))}MBÎ•º Ï¥àÍ≥ºÌï©ÎãàÎã§.`);
            return;
        }

        if (mode === 'single') {
            // Îã®Ïùº Î™®Îìú: Í∏∞Ï°¥ ÌååÏùº ÎåÄÏ≤¥
            setFiles(fileArray.slice(0, 1));
        } else {
            // Îã§Ï§ë Î™®Îìú: ÌååÏùº Ï∂îÍ∞Ä (ÏµúÎåÄ Í∞úÏàò Ï†úÌïú)
            setFiles(prev => {
                const combined = [...prev, ...fileArray];
                if (combined.length > maxFiles) {
                    setError(`ÏµúÎåÄ ${maxFiles}Í∞úÏùò ÌååÏùºÎßå ÏóÖÎ°úÎìúÌï† Ïàò ÏûàÏäµÎãàÎã§.`);
                    return combined.slice(0, maxFiles);
                }
                return combined;
            });
        }
        setError('');
    };

    // ÎìúÎûòÍ∑∏&ÎìúÎ°≠ Ìï∏Îì§Îü¨
    const handleDrop = (e) => {
        e.preventDefault();
        handleFiles(e.dataTransfer.files);
    };

    // ÌÅ¥Î¶≠ ÏóÖÎ°úÎìú
    const handleClickArea = () => {
        inputRef.current?.click();
    };

    // ÌååÏùº ÏÇ≠Ï†ú
    const handleRemoveFile = (indexToRemove) => {
        setFiles(prev => prev.filter((_, index) => index !== indexToRemove));
    };

    // ÏóÖÎ°úÎìú Ïã§Ìñâ
    const handleUpload = async () => {
        if (!files || (Array.isArray(files) ? files.length === 0 : !files)) {
            setError('ÌååÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        const formData = new FormData();

        if (mode === 'single') {
            // Îã®Ïùº Î™®Îìú: Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ ÍµêÏ≤¥ (replace ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÇ¨Ïö©)
            const fileToUpload = Array.isArray(files) ? files[0] : files;
            formData.append('files', fileToUpload);
            formData.append('setFirstAsThumbnail', true);
        } else {
            // Îã§Ï§ë Î™®Îìú: Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄÏóê Ï∂îÍ∞Ä (multiple ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÇ¨Ïö©)
            const filesToUpload = Array.isArray(files) ? files : [files];
            filesToUpload.forEach(file => {
                formData.append('files', file);
            });
            formData.append('setFirstAsThumbnail', false);
        }

        formData.append('imageTypeCode', imageTypeCode);
        formData.append('referenceId', referenceId);

        setLoading(true);
        setError('');

        try {
            // Îã®Ïùº Î™®ÎìúÎäî ÍµêÏ≤¥(replace), Îã§Ï§ë Î™®ÎìúÎäî Ï∂îÍ∞Ä(multiple)
            const endpoint = mode === 'single' ? '/upload/replace' : '/upload/multiple';
            const response = await apiRequest.post(`${FILE_API_BASE_URL}${endpoint}`, formData, {
                headers: {
                    'Content-Type': 'multipart/form-data',
                },
            });

            if (response.data.success) {
                onUploadSuccess(response.data);
                setFiles(mode === 'single' ? null : []);
                loadImages(); // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
            } else {
                throw new Error(response.data.message || 'ÏóÖÎ°úÎìú Ïã§Ìå®');
            }
        } catch (err) {
            const errorMessage = err.response?.data?.message || err.message || 'ÏóÖÎ°úÎìú Ïã§Ìå®';
            setError(errorMessage);
            onUploadError(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    // Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄÏóê ÏÉà Ïù¥ÎØ∏ÏßÄ Ï∂îÍ∞Ä (ÍµêÏ≤¥Í∞Ä ÏïÑÎãå Ï∂îÍ∞Ä)
    const handleUploadAppend = async (filesToUpload = files) => {
        if (filesToUpload.length === 0) {
            setError('ÌååÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        const formData = new FormData();
        filesToUpload.forEach(file => {
            formData.append('files', file);
        });
        formData.append('imageTypeCode', imageTypeCode);
        formData.append('referenceId', referenceId);
        formData.append('setFirstAsThumbnail', false);

        setLoading(true);
        setError('');

        try {
            // multiple ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÇ¨Ïö© (Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄÏóê Ï∂îÍ∞Ä)
            const response = await apiRequest.post(`${FILE_API_BASE_URL}/upload/multiple`, formData, {
                headers: {
                    'Content-Type': 'multipart/form-data',
                },
            });

            if (response.data.success) {
                onUploadSuccess(response.data);
                setFiles([]);
                loadImages(); // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
            } else {
                throw new Error(response.data.message || 'ÏóÖÎ°úÎìú Ïã§Ìå®');
            }
        } catch (err) {
            const errorMessage = err.response?.data?.message || err.message || 'ÏóÖÎ°úÎìú Ïã§Ìå®';
            setError(errorMessage);
            onUploadError(errorMessage);
        } finally {
            setLoading(false);
        }
    };


    // Í∞úÎ≥Ñ Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
    const handleDeleteImage = async (imageId) => {
        if (!imageId) return;

        const confirmDelete = window.confirm('Ïù¥ Ïù¥ÎØ∏ÏßÄÎ•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?');
        if (!confirmDelete) return;

        try {
            setLoading(true);
            const response = await apiRequest.delete(`${FILE_API_BASE_URL}/delete`, {
                params: { imageId }
            });

            if (response.data.success) {
                setImages(prev => prev.filter(img => img.imageId !== imageId));
                // Ïù¥ÎØ∏ÏßÄ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
                loadImages();
            } else {
                throw new Error(response.data.message || 'ÏÇ≠Ï†ú Ïã§Ìå®');
            }
        } catch (err) {
            const errorMessage = err.response?.data?.message || err.message || 'Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú Ïã§Ìå®';
            setError(errorMessage);
            onUploadError(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    // refÎ•º ÌÜµÌï¥ Ïô∏Î∂ÄÏóêÏÑú Ï†ëÍ∑ºÌï† Ïàò ÏûàÎäî Ìï®ÏàòÎì§ ÎÖ∏Ï∂ú
    React.useImperativeHandle(ref, () => ({
        handleUpload,
        hasFiles: Array.isArray(files) ? files.length > 0 : files !== null && files !== undefined,
        isLoading: loading,
        // Ìèº Ï†úÏ∂ú ÏãúÏóêÎäî ÏóÖÎ°úÎìúÌïòÏßÄ ÏïäÏùå (Ïù¥ÎØ∏ Í¥ÄÎ¶¨ Î™®ÎìúÏóêÏÑú Í∞úÎ≥Ñ ÏóÖÎ°úÎìúÎê®)
        skipUpload: () => {
            console.log("ImageUploadViewer: Ìèº Ï†úÏ∂ú Ïãú Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ïä§ÌÇµ (Ïù¥ÎØ∏ Í∞úÎ≥Ñ ÏóÖÎ°úÎìúÎê®)");
        }
    }));

    return (
        <div className={`image-upload-viewer ${className}`}>
            {loading ? (
                <div className="viewer-loading">
                    Ïù¥ÎØ∏ÏßÄ Î°úÎî© Ï§ë...
                </div>
            ) : error ? (
                <div className="viewer-error">
                    {error}
                    <button onClick={loadImages} className="retry-btn">
                        Îã§Ïãú ÏãúÎèÑ
                    </button>
                </div>
            ) : (
                // ÌÜµÌï© Ïù¥ÎØ∏ÏßÄ Í¥ÄÎ¶¨ ÌôîÎ©¥ - Í∞ÑÎã®ÌïòÍ≤å!
                <div className="simple-image-manager">
                    {/* Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄÎì§ Í∑∏Î¶¨Îìú */}
                    {images && images.length > 0 && (
                        <div className="images-grid">
                            {images.map((image, index) => (
                                <div key={image.imageId || index} className="image-grid-item">
                                    <div className="image-wrapper">
                                        <img
                                            src={getImageUrl(image)}
                                            alt={image.originalName || `Ïù¥ÎØ∏ÏßÄ ${index + 1}`}
                                            className="grid-image"
                                        />
                                        <button
                                            type="button"
                                            className="delete-image-btn"
                                            onClick={() => handleDeleteImage(image.imageId)}
                                            title="Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú"
                                        >
                                            ‚úï
                                        </button>
                                    </div>
                                    <div className="image-info">
                                        <span className="image-name">{image.originalName}</span>
                                        {image.isThumbnail && <span className="thumbnail-badge">Ïç∏ÎÑ§Ïùº</span>}
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}

                    {/* ÏÉà Ïù¥ÎØ∏ÏßÄ Ï∂îÍ∞Ä ÏòÅÏó≠ */}
                    <div
                        className={`simple-upload-area ${(!images || images.length === 0) ? 'empty' : ''}`}
                        onClick={handleClickArea}
                        onDragOver={(e) => e.preventDefault()}
                        onDrop={handleDrop}
                    >
                        <div className="upload-placeholder">
                            <div className="upload-icon">üì∑</div>
                            <p>{(!images || images.length === 0) ? 'Ïù¥ÎØ∏ÏßÄÎ•º ÎìúÎûòÍ∑∏ÌïòÍ±∞ÎÇò ÌÅ¥Î¶≠ÌïòÏó¨ ÏÑ†ÌÉù' : 'ÏÉà Ïù¥ÎØ∏ÏßÄ Ï∂îÍ∞Ä'}</p>
                        </div>
                    </div>

                    {/* ÏÑ†ÌÉùÎêú ÌååÏùºÎì§ ÎØ∏Î¶¨Î≥¥Í∏∞ */}
                    {files && files.length > 0 && (
                        <div className="selected-files">
                            <h4>ÏÑ†ÌÉùÎêú ÌååÏùº ({files.length}Í∞ú)</h4>
                            <div className="uploaded-files">
                                {files.map((file, index) => {
                                    const isFileObject = file instanceof File;
                                    const previewUrl = isFileObject ? URL.createObjectURL(file) : getImageUrl(file);
                                    const fileName = isFileObject ? file.name : (file.originalName || `ÌååÏùº ${index + 1}`);

                                    return (
                                        <div key={index} className="file-item">
                                            {previewUrl && (
                                                <img
                                                    src={previewUrl}
                                                    alt={fileName}
                                                    className="file-preview"
                                                />
                                            )}
                                            <button
                                                type="button"
                                                className="file-remove-btn"
                                                onClick={() => handleRemoveFile(index)}
                                            >
                                                ‚úï
                                            </button>
                                            <p className="file-name">{fileName}</p>
                                        </div>
                                    );
                                })}
                            </div>
                            <p className="upload-note">Îì±Î°ù Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú ÏóÖÎ°úÎìúÎê©ÎãàÎã§.</p>
                        </div>
                    )}

                    {error && (
                        <div className="error-message">{error}</div>
                    )}

                    <input
                        type="file"
                        accept={acceptTypes}
                        multiple={mode === 'multiple'}
                        ref={inputRef}
                        onChange={(e) => handleFiles(e.target.files)}
                        style={{ display: 'none' }}
                    />
                </div>
            )}
        </div>
    );
});

// Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú Ïú†Ìã∏Î¶¨Ìã∞
export const deleteImage = async (filePath) => {
    try {
        const response = await apiRequest.delete(`${FILE_API_BASE_URL}/delete`, {
            params: { filePath }
        });
        return response.data;
    } catch (err) {
        throw new Error(err.response?.data?.message || err.message || 'ÏÇ≠Ï†ú Ïã§Ìå®');
    }
};

// Í∏∞Î≥∏ export
export default {
    // Ï°∞Ìöå Ìï®Ïàò
    fetchSingleImage,
    fetchImagesByReference,

    // Î∑∞Ïñ¥ Ïª¥Ìè¨ÎÑåÌä∏
    ImageSlider,
    ImageUploadViewer,

    // Ïú†Ìã∏Î¶¨Ìã∞
    deleteImage,
    getImageUrl
};

// Í∞úÎ≥Ñ export
export { getImageUrl };